"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TelegrafSessionRedis = void 0;
const debug = require('debug')('telegraf:session-redis');
class TelegrafSessionRedis {
    constructor(options) {
        this.options = Object.assign({
            property: 'session',
            getSessionKey: (ctx) => ctx.from && ctx.chat && `${ctx.from.id}:${ctx.chat.id}`,
            store: {}
        }, options);
        console.log(this.client)
        this.client = this.options.client;
    }
    async getSession(key) {
        let json = await this.client.get(key);
        if (!json) {
            return {};
        }
        try {
            const session = JSON.parse(json);
            debug('session state', key, session);
            return session;
        }
        catch (error) {
            debug('Parse session state failed', error);
        }
        return {};
    }
    async clearSession(key) {
        debug('clear session', key);
        await this.client.del(key);
    }
    async saveSession(key, session) {
        if (!session || Object.keys(session).length === 0) {
            return this.clearSession(key).then(() => ({}));
        }
        if (this.options.ttl) {
            debug('session ttl', session);
            await this.client.setex(key, this.options.ttl, JSON.stringify(session));
        }
        else {
            debug('save session', key, session);
            await this.client.set(key, JSON.stringify(session));
        }
    }
    middleware() {
        return async (ctx, next) => {
            const key = this.options.getSessionKey(ctx);
            if (!key) {
                return next();
            }
            let session = await this.getSession(key);
            debug('session snapshot', key, session);
            Object.defineProperty(ctx, this.options.property, {
                get: function () {
                    return session;
                },
                set: function (newValue) {
                    session = Object.assign({}, newValue);
                },
                writable:true
            });
            let rs = await next();
            await this.saveSession(key, session);
            return rs;
        };
    }
}
exports.TelegrafSessionRedis = TelegrafSessionRedis;
//# sourceMappingURL=telegraf-session-redis.js.map